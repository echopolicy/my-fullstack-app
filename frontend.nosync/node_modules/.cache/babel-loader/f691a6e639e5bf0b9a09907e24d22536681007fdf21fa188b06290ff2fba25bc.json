{"ast":null,"code":"var _jsxFileName = \"/Users/hamansharma/Desktop/Code/echoPolicy/my-fullstack-app/frontend/src/pages/PollFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PollFeed = () => {\n  _s();\n  const [polls, setPolls] = useState([]);\n  useEffect(() => {\n    fetch('/api/polls') // adjust if using a different endpoint\n    .then(res => res.json()).then(data => {\n      console.log('Fetched polls:', data);\n      setPolls(data);\n    }).catch(err => console.error('Error fetching polls:', err));\n  }, []);\n  const handleVote = async (pollId, optionIndex) => {\n    try {\n      const res = await fetch(`http://localhost:5001/api/polls/${pollId}/vote`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          optionIndex\n        })\n      });\n      if (res.ok) {\n        const updatedPoll = await res.json();\n        setPolls(prev => prev.map(p => p.id === pollId ? updatedPoll : p));\n      } else {\n        console.error('Vote failed');\n      }\n    } catch (error) {\n      console.error('Error voting:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Active Polls\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), polls.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No active polls available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : polls.map(poll => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid #ccc',\n        padding: '1rem',\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: poll.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), poll.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleVote(poll.id, index),\n          children: [option.text, \" \\u2014 \", option.votes, \" votes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }, this))]\n    }, poll.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(PollFeed, \"KtzQibcdPE9p2pwVeAS/JhcPm48=\");\n_c = PollFeed;\nexport default PollFeed;\nvar _c;\n$RefreshReg$(_c, \"PollFeed\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","PollFeed","_s","polls","setPolls","fetch","then","res","json","data","console","log","catch","err","error","handleVote","pollId","optionIndex","method","headers","body","JSON","stringify","ok","updatedPoll","prev","map","p","id","children","fileName","_jsxFileName","lineNumber","columnNumber","length","poll","style","border","padding","marginBottom","question","options","option","index","onClick","text","votes","_c","$RefreshReg$"],"sources":["/Users/hamansharma/Desktop/Code/echoPolicy/my-fullstack-app/frontend/src/pages/PollFeed.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst PollFeed = () => {\n  const [polls, setPolls] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/polls')  // adjust if using a different endpoint\n      .then(res => res.json())\n      .then(data => {\n        console.log('Fetched polls:', data);\n        setPolls(data);\n      })\n      .catch(err => console.error('Error fetching polls:', err));\n  }, []);\n\n  const handleVote = async (pollId, optionIndex) => {\n    try {\n      const res = await fetch(`http://localhost:5001/api/polls/${pollId}/vote`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ optionIndex })\n      });\n\n      if (res.ok) {\n        const updatedPoll = await res.json();\n        setPolls(prev =>\n          prev.map(p => (p.id === pollId ? updatedPoll : p))\n        );\n      } else {\n        console.error('Vote failed');\n      }\n    } catch (error) {\n      console.error('Error voting:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Active Polls</h2>\n      {polls.length === 0 ? (\n        <p>No active polls available.</p>\n      ) : (\n        polls.map(poll => (\n          <div key={poll.id} style={{ border: '1px solid #ccc', padding: '1rem', marginBottom: '1rem' }}>\n            <h3>{poll.question}</h3>\n            {poll.options.map((option, index) => (\n              <div key={index}>\n                <button onClick={() => handleVote(poll.id, index)}>\n                  {option.text} â€” {option.votes} votes\n                </button>\n              </div>\n            ))}\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default PollFeed;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}